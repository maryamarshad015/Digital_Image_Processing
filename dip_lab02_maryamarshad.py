# -*- coding: utf-8 -*-
"""DIP_LAB02_MaryamArshad.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JYJeaDJl79ZciM8m_Swcai116xI-2Y4p
"""

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

"""## Task 1: Open and Display the Parking Lot Image

#Concept:
cv2.imread() reads an image into a NumPy array, and cv2_imshow() is used for displaying images in Jupyter/Colab environments.
"""

image_path = "th.jpeg"
image = cv2.imread(image_path)
cv2_imshow(image)

"""# Task 2: Convert to Grayscale

#Concept:
Grayscale images simplify computations by reducing three color channels (RGB) into one intensity channel.
"""

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
gray_image_path = "parking_slot_gray.jpg"
cv2.imwrite(gray_image_path, gray_image)
cv2_imshow(gray_image)

"""## Task 3: Analyze Dimensions

#Concept:
The image.shape property provides structural details of the image: height, width, and the number of color channels.
"""

height, width, channels = image.shape
print(f"Image Dimensions - Height: {height}, Width: {width}, Channels: {channels}")

"""## Task 4: Crop the Image

#Concept:
Slicing a NumPy array isolates a region of interest (ROI) within the image for further analysis.
"""

x, y, w, h = 50, 50, 100, 200
slot1 = gray_image[y:y+h, x:x+w]
slot1_path = "slot1.jpg"
cv2.imwrite(slot1_path, slot1)
cv2_imshow(slot1)

"""## Task 5: Count White Spaces

#Concept:
Thresholding separates pixel intensities into binary values (white or black), making it easy to count high-intensity (white) regions.
"""

_, thresholded = cv2.threshold(slot1, 200, 255, cv2.THRESH_BINARY)
white_space_count = np.sum(thresholded == 255)
print(f"White Space Count in Slot 1: {white_space_count}")

"""# Task 6: Draw Bounding Boxes
# Draw rectangles around three parking slots

#Concept:
 cv2.rectangle() overlays rectangular shapes with specified coordinates, color, and thickness onto the image.
"""

highlighted_image = image.copy()

# Empty Slot 1 (Top left area)
cv2.rectangle(highlighted_image, (30,30), (120,60), (0, 255, 0), 2)

# Empty Slot 2 (Middle right area)
cv2.rectangle(highlighted_image, (70, 130), (135, 290), (0, 255, 0), 2)

# Empty Slot 3 (Bottom middle area)
cv2.rectangle(highlighted_image, (180, 10), (230, 50), (0, 255, 0), 2)

highlighted_image_path = 'parking_lot.jpg'
cv2.imwrite(highlighted_image_path, highlighted_image)

cv2_imshow(highlighted_image)

